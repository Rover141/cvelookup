Product_Version;CVE-ID;CVSS;Date;Description;URL;Exploit?
Nginx-1.14.21;CVE-2018-16845;5.8;2018-11-07;nginx before versions 1.15.6, 1.14.1 has a vulnerability in the ngx_http_mp4_module, which might allow an attacker to cause infinite loop in a worker process, cause a worker process crash, or might result in worker process memory disclosure by using a specially crafted mp4 file. The issue only affects nginx if it is built with the ngx_http_mp4_module (the module is not built by default) and the .mp4. directive is used in the configuration file. Further, the attack is only possible if an attacker is able to trigger processing of a specially crafted mp4 file with the ngx_http_mp4_module.;http://www.cvedetails.com/cve/CVE-2018-16845/;None
Nginx-1.14.21;CVE-2018-16844;7.8;2018-11-07;nginx before versions 1.15.6 and 1.14.1 has a vulnerability in the implementation of HTTP/2 that can allow for excessive CPU usage. This issue affects nginx compiled with the ngx_http_v2_module (not compiled by default) if the &#039,http2&#039, option of the &#039,listen&#039, directive is used in a configuration file.;http://www.cvedetails.com/cve/CVE-2018-16844/;None
Nginx-1.14.21;CVE-2018-16843;7.8;2018-11-07;nginx before versions 1.15.6 and 1.14.1 has a vulnerability in the implementation of HTTP/2 that can allow for excessive memory consumption. This issue affects nginx compiled with the ngx_http_v2_module (not compiled by default) if the &#039,http2&#039, option of the &#039,listen&#039, directive is used in a configuration file.;http://www.cvedetails.com/cve/CVE-2018-16843/;None
Product_Version;CVE-ID;CVSS;Date;Description;URL;Exploit?
Tomcat-7.0.47;CVE-2019-0232;9.3;2019-04-15;When running on Windows with enableCmdLineArguments enabled, the CGI Servlet in Apache Tomcat 9.0.0.M1 to 9.0.17, 8.5.0 to 8.5.39 and 7.0.0 to 7.0.93 is vulnerable to Remote Code Execution due to a bug in the way the JRE passes command line arguments to Windows. The CGI Servlet is disabled by default. The CGI option enableCmdLineArguments is disable by default in Tomcat 9.0.x (and will be disabled by default in all versions in response to this vulnerability). For a detailed explanation of the JRE behaviour, see Markus Wulftange&#039,s blog (https://codewhitesec.blogspot.com/2016/02/java-and-command-line-injections-in-windows.html) and this archived MSDN blog (https://web.archive.org/web/20161228144344/https://blogs.msdn.microsoft.com/twistylittlepassagesallalike/2011/04/23/everyone-quotes-command-line-arguments-the-wrong-way/).;http://www.cvedetails.com/cve/CVE-2019-0232/;None
Tomcat-7.0.47;CVE-2019-0221;4.3;2019-05-28;The SSI printenv command in Apache Tomcat 9.0.0.M1 to 9.0.0.17, 8.5.0 to 8.5.39 and 7.0.0 to 7.0.93 echoes user provided data without escaping and is, therefore, vulnerable to XSS. SSI is disabled by default. The printenv command is intended for debugging and is unlikely to be present in a production website.;http://www.cvedetails.com/cve/CVE-2019-0221/;None
Tomcat-7.0.47;CVE-2018-11784;4.3;2018-10-04;When the default servlet in Apache Tomcat versions 9.0.0.M1 to 9.0.11, 8.5.0 to 8.5.33 and 7.0.23 to 7.0.90 returned a redirect to a directory (e.g. redirecting to &#039,/foo/&#039, when the user requested &#039,/foo&#039,) a specially crafted URL could be used to cause the redirect to be generated to any URI of the attackers choice.;http://www.cvedetails.com/cve/CVE-2018-11784/;None
Tomcat-7.0.47;CVE-2018-8034;5.0;2018-08-01;The host name verification when using TLS with the WebSocket client was missing. It is now enabled by default. Versions Affected: Apache Tomcat 9.0.0.M1 to 9.0.9, 8.5.0 to 8.5.31, 8.0.0.RC1 to 8.0.52, and 7.0.35 to 7.0.88.;http://www.cvedetails.com/cve/CVE-2018-8034/;None
Tomcat-7.0.47;CVE-2018-8014;7.5;2018-05-16;The defaults settings for the CORS filter provided in Apache Tomcat 9.0.0.M1 to 9.0.8, 8.5.0 to 8.5.31, 8.0.0.RC1 to 8.0.52, 7.0.41 to 7.0.88 are insecure and enable &#039,supportsCredentials&#039, for all origins. It is expected that users of the CORS filter will have configured it appropriately for their environment rather than using it in the default configuration. Therefore, it is expected that most users will not be impacted by this issue.;http://www.cvedetails.com/cve/CVE-2018-8014/;None
Tomcat-7.0.47;CVE-2018-1336;5.0;2018-08-02;An improper handing of overflow in the UTF-8 decoder with supplementary characters can lead to an infinite loop in the decoder causing a Denial of Service. Versions Affected: Apache Tomcat 9.0.0.M9 to 9.0.7, 8.5.0 to 8.5.30, 8.0.0.RC1 to 8.0.51, and 7.0.28 to 7.0.86.;http://www.cvedetails.com/cve/CVE-2018-1336/;None
Tomcat-7.0.47;CVE-2018-1305;4.0;2018-02-23;Security constraints defined by annotations of Servlets in Apache Tomcat 9.0.0.M1 to 9.0.4, 8.5.0 to 8.5.27, 8.0.0.RC1 to 8.0.49 and 7.0.0 to 7.0.84 were only applied once a Servlet had been loaded. Because security constraints defined in this way apply to the URL pattern and any URLs below that point, it was possible - depending on the order Servlets were loaded - for some security constraints not to be applied. This could have exposed resources to users who were not authorised to access them.;http://www.cvedetails.com/cve/CVE-2018-1305/;None
Tomcat-7.0.47;CVE-2018-1304;4.3;2018-02-28;The URL pattern of &quot,&quot, (the empty string) which exactly maps to the context root was not correctly handled in Apache Tomcat 9.0.0.M1 to 9.0.4, 8.5.0 to 8.5.27, 8.0.0.RC1 to 8.0.49 and 7.0.0 to 7.0.84 when used as part of a security constraint definition. This caused the constraint to be ignored. It was, therefore, possible for unauthorised users to gain access to web application resources that should have been protected. Only security constraints with a URL pattern of the empty string were affected.;http://www.cvedetails.com/cve/CVE-2018-1304/;None
Tomcat-7.0.47;CVE-2017-12617;6.8;2017-10-03;When running Apache Tomcat versions 9.0.0.M1 to 9.0.0, 8.5.0 to 8.5.22, 8.0.0.RC1 to 8.0.46 and 7.0.0 to 7.0.81 with HTTP PUTs enabled (e.g. via setting the readonly initialisation parameter of the Default servlet to false) it was possible to upload a JSP file to the server via a specially crafted request. This JSP could then be requested and any code it contained would be executed by the server.;http://www.cvedetails.com/cve/CVE-2017-12617/;None
Tomcat-7.0.47;CVE-2017-12616;5.0;2017-09-19;When using a VirtualDirContext with Apache Tomcat 7.0.0 to 7.0.80 it was possible to bypass security constraints and/or view the source code of JSPs for resources served by the VirtualDirContext using a specially crafted request.;http://www.cvedetails.com/cve/CVE-2017-12616/;None
Tomcat-7.0.47;CVE-2017-12615;6.8;2017-09-19;When running Apache Tomcat 7.0.0 to 7.0.79 on Windows with HTTP PUTs enabled (e.g. via setting the readonly initialisation parameter of the Default to false) it was possible to upload a JSP file to the server via a specially crafted request. This JSP could then be requested and any code it contained would be executed by the server.;http://www.cvedetails.com/cve/CVE-2017-12615/;None
Tomcat-7.0.47;CVE-2017-7674;4.3;2017-08-10;The CORS Filter in Apache Tomcat 9.0.0.M1 to 9.0.0.M21, 8.5.0 to 8.5.15, 8.0.0.RC1 to 8.0.44 and 7.0.41 to 7.0.78 did not add an HTTP Vary header indicating that the response varies depending on Origin. This permitted client and server side cache poisoning in some circumstances.;http://www.cvedetails.com/cve/CVE-2017-7674/;None
Tomcat-7.0.47;CVE-2017-5664;5.0;2017-06-06;The error page mechanism of the Java Servlet Specification requires that, when an error occurs and an error page is configured for the error that occurred, the original request and response are forwarded to the error page. This means that the request is presented to the error page with the original HTTP method. If the error page is a static file, expected behaviour is to serve content of the file as if processing a GET request, regardless of the actual HTTP method. The Default Servlet in Apache Tomcat 9.0.0.M1 to 9.0.0.M20, 8.5.0 to 8.5.14, 8.0.0.RC1 to 8.0.43 and 7.0.0 to 7.0.77 did not do this. Depending on the original request this could lead to unexpected and undesirable results for static error pages including, if the DefaultServlet is configured to permit writes, the replacement or removal of the custom error page. Notes for other user provided error pages: (1) Unless explicitly coded otherwise, JSPs ignore the HTTP method. JSPs used as error pages must must ensure that they handle any error dispatch as a GET request, regardless of the actual method. (2) By default, the response generated by a Servlet does depend on the HTTP method. Custom Servlets used as error pages must ensure that they handle any error dispatch as a GET request, regardless of the actual method.;http://www.cvedetails.com/cve/CVE-2017-5664/;None
Tomcat-7.0.47;CVE-2017-5648;6.4;2017-04-17;While investigating bug 60718, it was noticed that some calls to application listeners in Apache Tomcat 9.0.0.M1 to 9.0.0.M17, 8.5.0 to 8.5.11, 8.0.0.RC1 to 8.0.41, and 7.0.0 to 7.0.75 did not use the appropriate facade object. When running an untrusted application under a SecurityManager, it was therefore possible for that untrusted application to retain a reference to the request or response object and thereby access and/or modify information associated with another web application.;http://www.cvedetails.com/cve/CVE-2017-5648/;None
Tomcat-7.0.47;CVE-2017-5647;5.0;2017-04-17;A bug in the handling of the pipelined requests in Apache Tomcat 9.0.0.M1 to 9.0.0.M18, 8.5.0 to 8.5.12, 8.0.0.RC1 to 8.0.42, 7.0.0 to 7.0.76, and 6.0.0 to 6.0.52, when send file was used, results in the pipelined request being lost when send file processing of the previous request completed. This could result in responses appearing to be sent for the wrong request. For example, a user agent that sent requests A, B and C could see the correct response for request A, the response for request C for request B and no response for request C.;http://www.cvedetails.com/cve/CVE-2017-5647/;None
Tomcat-7.0.47;CVE-2016-8745;5.0;2017-08-10;A bug in the error handling of the send file code for the NIO HTTP connector in Apache Tomcat 9.0.0.M1 to 9.0.0.M13, 8.5.0 to 8.5.8, 8.0.0.RC1 to 8.0.39, 7.0.0 to 7.0.73 and 6.0.16 to 6.0.48 resulted in the current Processor object being added to the Processor cache multiple times. This in turn meant that the same Processor could be used for concurrent requests. Sharing a Processor can result in information leakage between requests including, not not limited to, session ID and the response body. The bug was first noticed in 8.5.x onwards where it appears the refactoring of the Connector code for 8.5.x onwards made it more likely that the bug was observed. Initially it was thought that the 8.5.x refactoring introduced the bug but further investigation has shown that the bug is present in all currently supported Tomcat versions.;http://www.cvedetails.com/cve/CVE-2016-8745/;None
Tomcat-7.0.47;CVE-2016-8735;7.5;2017-04-06;Remote code execution is possible with Apache Tomcat before 6.0.48, 7.x before 7.0.73, 8.x before 8.0.39, 8.5.x before 8.5.7, and 9.x before 9.0.0.M12 if JmxRemoteLifecycleListener is used and an attacker can reach JMX ports. The issue exists because this listener wasn&#039,t updated for consistency with the CVE-2016-3427 Oracle patch that affected credential types.;http://www.cvedetails.com/cve/CVE-2016-8735/;None
Tomcat-7.0.47;CVE-2016-6816;6.8;2017-03-20;The code in Apache Tomcat 9.0.0.M1 to 9.0.0.M11, 8.5.0 to 8.5.6, 8.0.0.RC1 to 8.0.38, 7.0.0 to 7.0.72, and 6.0.0 to 6.0.47 that parsed the HTTP request line permitted invalid characters. This could be exploited, in conjunction with a proxy that also permitted the invalid characters but with a different interpretation, to inject data into the HTTP response. By manipulating the HTTP response the attacker could poison a web-cache, perform an XSS attack and/or obtain sensitive information from requests other then their own.;http://www.cvedetails.com/cve/CVE-2016-6816/;None
Tomcat-7.0.47;CVE-2016-6797;5.0;2017-08-10;The ResourceLinkFactory implementation in Apache Tomcat 9.0.0.M1 to 9.0.0.M9, 8.5.0 to 8.5.4, 8.0.0.RC1 to 8.0.36, 7.0.0 to 7.0.70 and 6.0.0 to 6.0.45 did not limit web application access to global JNDI resources to those resources explicitly linked to the web application. Therefore, it was possible for a web application to access any global JNDI resource whether an explicit ResourceLink had been configured or not.;http://www.cvedetails.com/cve/CVE-2016-6797/;None
Tomcat-7.0.47;CVE-2016-6796;5.0;2017-08-10;A malicious web application running on Apache Tomcat 9.0.0.M1 to 9.0.0.M9, 8.5.0 to 8.5.4, 8.0.0.RC1 to 8.0.36, 7.0.0 to 7.0.70 and 6.0.0 to 6.0.45 was able to bypass a configured SecurityManager via manipulation of the configuration parameters for the JSP Servlet.;http://www.cvedetails.com/cve/CVE-2016-6796/;None
Tomcat-7.0.47;CVE-2016-6794;5.0;2017-08-10;When a SecurityManager is configured, a web application&#039,s ability to read system properties should be controlled by the SecurityManager. In Apache Tomcat 9.0.0.M1 to 9.0.0.M9, 8.5.0 to 8.5.4, 8.0.0.RC1 to 8.0.36, 7.0.0 to 7.0.70, 6.0.0 to 6.0.45 the system property replacement feature for configuration files could be used by a malicious web application to bypass the SecurityManager and read system properties that should not be visible.;http://www.cvedetails.com/cve/CVE-2016-6794/;None
Tomcat-7.0.47;CVE-2016-5388;5.1;2016-07-18;Apache Tomcat 7.x through 7.0.70 and 8.x through 8.5.4, when the CGI Servlet is enabled, follows RFC 3875 section 4.1.18 and therefore does not protect applications from the presence of untrusted client data in the HTTP_PROXY environment variable, which might allow remote attackers to redirect an application&#039,s outbound HTTP traffic to an arbitrary proxy server via a crafted Proxy header in an HTTP request, aka an &quot,httpoxy&quot, issue. NOTE: the vendor states &quot,A mitigation is planned for future releases of Tomcat, tracked as CVE-2016-5388&quot,, in other words, this is not a CVE ID for a vulnerability.;http://www.cvedetails.com/cve/CVE-2016-5388/;None
Tomcat-7.0.47;CVE-2016-5018;5.0;2017-08-10;In Apache Tomcat 9.0.0.M1 to 9.0.0.M9, 8.5.0 to 8.5.4, 8.0.0.RC1 to 8.0.36, 7.0.0 to 7.0.70 and 6.0.0 to 6.0.45 a malicious web application was able to bypass a configured SecurityManager via a Tomcat utility method that was accessible to web applications.;http://www.cvedetails.com/cve/CVE-2016-5018/;None
Tomcat-7.0.47;CVE-2016-3092;7.8;2016-07-04;The MultipartStream class in Apache Commons Fileupload before 1.3.2, as used in Apache Tomcat 7.x before 7.0.70, 8.x before 8.0.36, 8.5.x before 8.5.3, and 9.x before 9.0.0.M7 and other products, allows remote attackers to cause a denial of service (CPU consumption) via a long boundary string.;http://www.cvedetails.com/cve/CVE-2016-3092/;None
Tomcat-7.0.47;CVE-2016-0763;6.5;2016-02-24;The setGlobalContext method in org/apache/naming/factory/ResourceLinkFactory.java in Apache Tomcat 7.x before 7.0.68, 8.x before 8.0.31, and 9.x before 9.0.0.M3 does not consider whether ResourceLinkFactory.setGlobalContext callers are authorized, which allows remote authenticated users to bypass intended SecurityManager restrictions and read or write to arbitrary application data, or cause a denial of service (application disruption), via a web application that sets a crafted global context.;http://www.cvedetails.com/cve/CVE-2016-0763/;None
Tomcat-7.0.47;CVE-2016-0762;4.3;2017-08-10;The Realm implementations in Apache Tomcat versions 9.0.0.M1 to 9.0.0.M9, 8.5.0 to 8.5.4, 8.0.0.RC1 to 8.0.36, 7.0.0 to 7.0.70 and 6.0.0 to 6.0.45 did not process the supplied password if the supplied user name did not exist. This made a timing attack possible to determine valid user names. Note that the default configuration includes the LockOutRealm which makes exploitation of this vulnerability harder.;http://www.cvedetails.com/cve/CVE-2016-0762/;None
Tomcat-7.0.47;CVE-2016-0714;6.5;2016-02-24;The session-persistence implementation in Apache Tomcat 6.x before 6.0.45, 7.x before 7.0.68, 8.x before 8.0.31, and 9.x before 9.0.0.M2 mishandles session attributes, which allows remote authenticated users to bypass intended SecurityManager restrictions and execute arbitrary code in a privileged context via a web application that places a crafted object in a session.;http://www.cvedetails.com/cve/CVE-2016-0714/;None
Tomcat-7.0.47;CVE-2016-0706;4.0;2016-02-24;Apache Tomcat 6.x before 6.0.45, 7.x before 7.0.68, 8.x before 8.0.31, and 9.x before 9.0.0.M2 does not place org.apache.catalina.manager.StatusManagerServlet on the org/apache/catalina/core/RestrictedServlets.properties list, which allows remote authenticated users to bypass intended SecurityManager restrictions and read arbitrary HTTP requests, and consequently discover session ID values, via a crafted web application.;http://www.cvedetails.com/cve/CVE-2016-0706/;None
Tomcat-7.0.47;CVE-2015-5351;6.8;2016-02-24;The (1) Manager and (2) Host Manager applications in Apache Tomcat 7.x before 7.0.68, 8.x before 8.0.31, and 9.x before 9.0.0.M2 establish sessions and send CSRF tokens for arbitrary new requests, which allows remote attackers to bypass a CSRF protection mechanism by using a token.;http://www.cvedetails.com/cve/CVE-2015-5351/;None
Tomcat-7.0.47;CVE-2015-5346;6.8;2016-02-24;Session fixation vulnerability in Apache Tomcat 7.x before 7.0.66, 8.x before 8.0.30, and 9.x before 9.0.0.M2, when different session settings are used for deployments of multiple versions of the same web application, might allow remote attackers to hijack web sessions by leveraging use of a requestedSessionSSL field for an unintended request, related to CoyoteAdapter.java and Request.java.;http://www.cvedetails.com/cve/CVE-2015-5346/;None
Product_Version;CVE-ID;CVSS;Date;Description;URL;Exploit?
Tomcat-8.5.13;CVE-2019-10072;5.0;2019-06-21;The fix for CVE-2019-0199 was incomplete and did not address HTTP/2 connection window exhaustion on write in Apache Tomcat versions 9.0.0.M1 to 9.0.19 and 8.5.0 to 8.5.40 . By not sending WINDOW_UPDATE messages for the connection window (stream 0) clients were able to cause server-side threads to block eventually leading to thread exhaustion and a DoS.;http://www.cvedetails.com/cve/CVE-2019-10072/;None
Tomcat-8.5.13;CVE-2019-0232;9.3;2019-04-15;When running on Windows with enableCmdLineArguments enabled, the CGI Servlet in Apache Tomcat 9.0.0.M1 to 9.0.17, 8.5.0 to 8.5.39 and 7.0.0 to 7.0.93 is vulnerable to Remote Code Execution due to a bug in the way the JRE passes command line arguments to Windows. The CGI Servlet is disabled by default. The CGI option enableCmdLineArguments is disable by default in Tomcat 9.0.x (and will be disabled by default in all versions in response to this vulnerability). For a detailed explanation of the JRE behaviour, see Markus Wulftange&#039,s blog (https://codewhitesec.blogspot.com/2016/02/java-and-command-line-injections-in-windows.html) and this archived MSDN blog (https://web.archive.org/web/20161228144344/https://blogs.msdn.microsoft.com/twistylittlepassagesallalike/2011/04/23/everyone-quotes-command-line-arguments-the-wrong-way/).;http://www.cvedetails.com/cve/CVE-2019-0232/;None
Tomcat-8.5.13;CVE-2019-0221;4.3;2019-05-28;The SSI printenv command in Apache Tomcat 9.0.0.M1 to 9.0.0.17, 8.5.0 to 8.5.39 and 7.0.0 to 7.0.93 echoes user provided data without escaping and is, therefore, vulnerable to XSS. SSI is disabled by default. The printenv command is intended for debugging and is unlikely to be present in a production website.;http://www.cvedetails.com/cve/CVE-2019-0221/;None
Tomcat-8.5.13;CVE-2019-0199;5.0;2019-04-10;The HTTP/2 implementation in Apache Tomcat 9.0.0.M1 to 9.0.14 and 8.5.0 to 8.5.37 accepted streams with excessive numbers of SETTINGS frames and also permitted clients to keep streams open without reading/writing request/response data. By keeping streams open for requests that utilised the Servlet API&#039,s blocking I/O, clients were able to cause server-side threads to block eventually leading to thread exhaustion and a DoS.;http://www.cvedetails.com/cve/CVE-2019-0199/;None
Tomcat-8.5.13;CVE-2018-11784;4.3;2018-10-04;When the default servlet in Apache Tomcat versions 9.0.0.M1 to 9.0.11, 8.5.0 to 8.5.33 and 7.0.23 to 7.0.90 returned a redirect to a directory (e.g. redirecting to &#039,/foo/&#039, when the user requested &#039,/foo&#039,) a specially crafted URL could be used to cause the redirect to be generated to any URI of the attackers choice.;http://www.cvedetails.com/cve/CVE-2018-11784/;None
Tomcat-8.5.13;CVE-2018-8037;4.3;2018-08-02;If an async request was completed by the application at the same time as the container triggered the async timeout, a race condition existed that could result in a user seeing a response intended for a different user. An additional issue was present in the NIO and NIO2 connectors that did not correctly track the closure of the connection when an async request was completed by the application and timed out by the container at the same time. This could also result in a user seeing a response intended for another user. Versions Affected: Apache Tomcat 9.0.0.M9 to 9.0.9 and 8.5.5 to 8.5.31.;http://www.cvedetails.com/cve/CVE-2018-8037/;None
Tomcat-8.5.13;CVE-2018-8034;5.0;2018-08-01;The host name verification when using TLS with the WebSocket client was missing. It is now enabled by default. Versions Affected: Apache Tomcat 9.0.0.M1 to 9.0.9, 8.5.0 to 8.5.31, 8.0.0.RC1 to 8.0.52, and 7.0.35 to 7.0.88.;http://www.cvedetails.com/cve/CVE-2018-8034/;None
Tomcat-8.5.13;CVE-2018-8014;7.5;2018-05-16;The defaults settings for the CORS filter provided in Apache Tomcat 9.0.0.M1 to 9.0.8, 8.5.0 to 8.5.31, 8.0.0.RC1 to 8.0.52, 7.0.41 to 7.0.88 are insecure and enable &#039,supportsCredentials&#039, for all origins. It is expected that users of the CORS filter will have configured it appropriately for their environment rather than using it in the default configuration. Therefore, it is expected that most users will not be impacted by this issue.;http://www.cvedetails.com/cve/CVE-2018-8014/;None
Tomcat-8.5.13;CVE-2018-1336;5.0;2018-08-02;An improper handing of overflow in the UTF-8 decoder with supplementary characters can lead to an infinite loop in the decoder causing a Denial of Service. Versions Affected: Apache Tomcat 9.0.0.M9 to 9.0.7, 8.5.0 to 8.5.30, 8.0.0.RC1 to 8.0.51, and 7.0.28 to 7.0.86.;http://www.cvedetails.com/cve/CVE-2018-1336/;None
Tomcat-8.5.13;CVE-2018-1305;4.0;2018-02-23;Security constraints defined by annotations of Servlets in Apache Tomcat 9.0.0.M1 to 9.0.4, 8.5.0 to 8.5.27, 8.0.0.RC1 to 8.0.49 and 7.0.0 to 7.0.84 were only applied once a Servlet had been loaded. Because security constraints defined in this way apply to the URL pattern and any URLs below that point, it was possible - depending on the order Servlets were loaded - for some security constraints not to be applied. This could have exposed resources to users who were not authorised to access them.;http://www.cvedetails.com/cve/CVE-2018-1305/;None
Tomcat-8.5.13;CVE-2018-1304;4.3;2018-02-28;The URL pattern of &quot,&quot, (the empty string) which exactly maps to the context root was not correctly handled in Apache Tomcat 9.0.0.M1 to 9.0.4, 8.5.0 to 8.5.27, 8.0.0.RC1 to 8.0.49 and 7.0.0 to 7.0.84 when used as part of a security constraint definition. This caused the constraint to be ignored. It was, therefore, possible for unauthorised users to gain access to web application resources that should have been protected. Only security constraints with a URL pattern of the empty string were affected.;http://www.cvedetails.com/cve/CVE-2018-1304/;None
Tomcat-8.5.13;CVE-2017-12617;6.8;2017-10-03;When running Apache Tomcat versions 9.0.0.M1 to 9.0.0, 8.5.0 to 8.5.22, 8.0.0.RC1 to 8.0.46 and 7.0.0 to 7.0.81 with HTTP PUTs enabled (e.g. via setting the readonly initialisation parameter of the Default servlet to false) it was possible to upload a JSP file to the server via a specially crafted request. This JSP could then be requested and any code it contained would be executed by the server.;http://www.cvedetails.com/cve/CVE-2017-12617/;None
Tomcat-8.5.13;CVE-2017-7675;5.0;2017-08-10;The HTTP/2 implementation in Apache Tomcat 9.0.0.M1 to 9.0.0.M21 and 8.5.0 to 8.5.15 bypassed a number of security checks that prevented directory traversal attacks. It was therefore possible to bypass security constraints using a specially crafted URL.;http://www.cvedetails.com/cve/CVE-2017-7675/;None
Tomcat-8.5.13;CVE-2017-7674;4.3;2017-08-10;The CORS Filter in Apache Tomcat 9.0.0.M1 to 9.0.0.M21, 8.5.0 to 8.5.15, 8.0.0.RC1 to 8.0.44 and 7.0.41 to 7.0.78 did not add an HTTP Vary header indicating that the response varies depending on Origin. This permitted client and server side cache poisoning in some circumstances.;http://www.cvedetails.com/cve/CVE-2017-7674/;None
Tomcat-8.5.13;CVE-2017-5664;5.0;2017-06-06;The error page mechanism of the Java Servlet Specification requires that, when an error occurs and an error page is configured for the error that occurred, the original request and response are forwarded to the error page. This means that the request is presented to the error page with the original HTTP method. If the error page is a static file, expected behaviour is to serve content of the file as if processing a GET request, regardless of the actual HTTP method. The Default Servlet in Apache Tomcat 9.0.0.M1 to 9.0.0.M20, 8.5.0 to 8.5.14, 8.0.0.RC1 to 8.0.43 and 7.0.0 to 7.0.77 did not do this. Depending on the original request this could lead to unexpected and undesirable results for static error pages including, if the DefaultServlet is configured to permit writes, the replacement or removal of the custom error page. Notes for other user provided error pages: (1) Unless explicitly coded otherwise, JSPs ignore the HTTP method. JSPs used as error pages must must ensure that they handle any error dispatch as a GET request, regardless of the actual method. (2) By default, the response generated by a Servlet does depend on the HTTP method. Custom Servlets used as error pages must ensure that they handle any error dispatch as a GET request, regardless of the actual method.;http://www.cvedetails.com/cve/CVE-2017-5664/;None
